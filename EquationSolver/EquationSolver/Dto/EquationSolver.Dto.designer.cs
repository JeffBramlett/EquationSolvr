// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.21575 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>EquationSolver.Dto</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace EquationSolver.Dto {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Collection of Equation Projects to Load
    /// </summary>
    public partial class EquationProjectMerge : System.ComponentModel.INotifyPropertyChanged {
        
        private string titleField;
        
        private SolverSettings settingsField;
        
        private AuditInfo auditField;
        
        private List<EquationProject> equationProjectListField;
        
        /// <summary>
        /// EquationProjectMerge class constructor
        /// </summary>
        public EquationProjectMerge() {
            this.equationProjectListField = new List<EquationProject>();
            this.auditField = new AuditInfo();
            this.settingsField = new SolverSettings();
        }
        
        public string Title {
            get {
                return this.titleField;
            }
            set {
                if ((this.titleField != null)) {
                    if ((titleField.Equals(value) != true)) {
                        this.titleField = value;
                        this.OnPropertyChanged("Title");
                    }
                }
                else {
                    this.titleField = value;
                    this.OnPropertyChanged("Title");
                }
            }
        }
        
        public SolverSettings Settings {
            get {
                return this.settingsField;
            }
            set {
                if ((this.settingsField != null)) {
                    if ((settingsField.Equals(value) != true)) {
                        this.settingsField = value;
                        this.OnPropertyChanged("Settings");
                    }
                }
                else {
                    this.settingsField = value;
                    this.OnPropertyChanged("Settings");
                }
            }
        }
        
        public AuditInfo Audit {
            get {
                return this.auditField;
            }
            set {
                if ((this.auditField != null)) {
                    if ((auditField.Equals(value) != true)) {
                        this.auditField = value;
                        this.OnPropertyChanged("Audit");
                    }
                }
                else {
                    this.auditField = value;
                    this.OnPropertyChanged("Audit");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("EquationProject", IsNullable=false)]
        public List<EquationProject> EquationProjectList {
            get {
                return this.equationProjectListField;
            }
            set {
                if ((this.equationProjectListField != null)) {
                    if ((equationProjectListField.Equals(value) != true)) {
                        this.equationProjectListField = value;
                        this.OnPropertyChanged("EquationProjectList");
                    }
                }
                else {
                    this.equationProjectListField = value;
                    this.OnPropertyChanged("EquationProjectList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public partial class SolverSettings : System.ComponentModel.INotifyPropertyChanged {
        
        private CalculationMethods calculationMethodField;
        
        public SolverSettings() {
            this.calculationMethodField = CalculationMethods.Decimal;
        }
        
        public CalculationMethods CalculationMethod {
            get {
                return this.calculationMethodField;
            }
            set {
                if ((calculationMethodField.Equals(value) != true)) {
                    this.calculationMethodField = value;
                    this.OnPropertyChanged("CalculationMethod");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public enum CalculationMethods {
        
        /// <remarks/>
        Decimal,
        
        /// <remarks/>
        Double,
    }
    
    public partial class Row : System.ComponentModel.INotifyPropertyChanged {
        
        private string labelField;
        
        private List<string> columnsField;
        
        /// <summary>
        /// Row class constructor
        /// </summary>
        public Row() {
            this.columnsField = new List<string>();
        }
        
        public string Label {
            get {
                return this.labelField;
            }
            set {
                if ((this.labelField != null)) {
                    if ((labelField.Equals(value) != true)) {
                        this.labelField = value;
                        this.OnPropertyChanged("Label");
                    }
                }
                else {
                    this.labelField = value;
                    this.OnPropertyChanged("Label");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Column", IsNullable=false)]
        public List<string> Columns {
            get {
                return this.columnsField;
            }
            set {
                if ((this.columnsField != null)) {
                    if ((columnsField.Equals(value) != true)) {
                        this.columnsField = value;
                        this.OnPropertyChanged("Columns");
                    }
                }
                else {
                    this.columnsField = value;
                    this.OnPropertyChanged("Columns");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public partial class AuditInfo : System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime createdOnField;
        
        private string createdByField;
        
        private System.DateTime modifiedOnField;
        
        private string modifiedByField;
        
        public System.DateTime CreatedOn {
            get {
                return this.createdOnField;
            }
            set {
                if ((createdOnField.Equals(value) != true)) {
                    this.createdOnField = value;
                    this.OnPropertyChanged("CreatedOn");
                }
            }
        }
        
        public string CreatedBy {
            get {
                return this.createdByField;
            }
            set {
                if ((this.createdByField != null)) {
                    if ((createdByField.Equals(value) != true)) {
                        this.createdByField = value;
                        this.OnPropertyChanged("CreatedBy");
                    }
                }
                else {
                    this.createdByField = value;
                    this.OnPropertyChanged("CreatedBy");
                }
            }
        }
        
        public System.DateTime ModifiedOn {
            get {
                return this.modifiedOnField;
            }
            set {
                if ((modifiedOnField.Equals(value) != true)) {
                    this.modifiedOnField = value;
                    this.OnPropertyChanged("ModifiedOn");
                }
            }
        }
        
        public string ModifiedBy {
            get {
                return this.modifiedByField;
            }
            set {
                if ((this.modifiedByField != null)) {
                    if ((modifiedByField.Equals(value) != true)) {
                        this.modifiedByField = value;
                        this.OnPropertyChanged("ModifiedBy");
                    }
                }
                else {
                    this.modifiedByField = value;
                    this.OnPropertyChanged("ModifiedBy");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public partial class Variable : System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string stringValueField;
        
        public string Name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        public string StringValue {
            get {
                return this.stringValueField;
            }
            set {
                if ((this.stringValueField != null)) {
                    if ((stringValueField.Equals(value) != true)) {
                        this.stringValueField = value;
                        this.OnPropertyChanged("StringValue");
                    }
                }
                else {
                    this.stringValueField = value;
                    this.OnPropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public partial class Equation : System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string triggerField;
        
        private string useExpressionField;
        
        private string expressionField;
        
        private int iterateField;
        
        private string targetField;
        
        private List<Equation> moreEquationsField;
        
        public Equation() {
            this.moreEquationsField = new List<Equation>();
            this.iterateField = 1;
        }
        
        public string Name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        public string Trigger {
            get {
                return this.triggerField;
            }
            set {
                if ((this.triggerField != null)) {
                    if ((triggerField.Equals(value) != true)) {
                        this.triggerField = value;
                        this.OnPropertyChanged("Trigger");
                    }
                }
                else {
                    this.triggerField = value;
                    this.OnPropertyChanged("Trigger");
                }
            }
        }
        
        public string UseExpression {
            get {
                return this.useExpressionField;
            }
            set {
                if ((this.useExpressionField != null)) {
                    if ((useExpressionField.Equals(value) != true)) {
                        this.useExpressionField = value;
                        this.OnPropertyChanged("UseExpression");
                    }
                }
                else {
                    this.useExpressionField = value;
                    this.OnPropertyChanged("UseExpression");
                }
            }
        }
        
        public string Expression {
            get {
                return this.expressionField;
            }
            set {
                if ((this.expressionField != null)) {
                    if ((expressionField.Equals(value) != true)) {
                        this.expressionField = value;
                        this.OnPropertyChanged("Expression");
                    }
                }
                else {
                    this.expressionField = value;
                    this.OnPropertyChanged("Expression");
                }
            }
        }
        
        public int Iterate {
            get {
                return this.iterateField;
            }
            set {
                if ((iterateField.Equals(value) != true)) {
                    this.iterateField = value;
                    this.OnPropertyChanged("Iterate");
                }
            }
        }
        
        public string Target {
            get {
                return this.targetField;
            }
            set {
                if ((this.targetField != null)) {
                    if ((targetField.Equals(value) != true)) {
                        this.targetField = value;
                        this.OnPropertyChanged("Target");
                    }
                }
                else {
                    this.targetField = value;
                    this.OnPropertyChanged("Target");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Equation", IsNullable=false)]
        public List<Equation> MoreEquations {
            get {
                return this.moreEquationsField;
            }
            set {
                if ((this.moreEquationsField != null)) {
                    if ((moreEquationsField.Equals(value) != true)) {
                        this.moreEquationsField = value;
                        this.OnPropertyChanged("MoreEquations");
                    }
                }
                else {
                    this.moreEquationsField = value;
                    this.OnPropertyChanged("MoreEquations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public partial class Argument : System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private int ordinalField;
        
        private string defaultField;
        
        public string Name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        public int Ordinal {
            get {
                return this.ordinalField;
            }
            set {
                if ((ordinalField.Equals(value) != true)) {
                    this.ordinalField = value;
                    this.OnPropertyChanged("Ordinal");
                }
            }
        }
        
        public string Default {
            get {
                return this.defaultField;
            }
            set {
                if ((this.defaultField != null)) {
                    if ((defaultField.Equals(value) != true)) {
                        this.defaultField = value;
                        this.OnPropertyChanged("Default");
                    }
                }
                else {
                    this.defaultField = value;
                    this.OnPropertyChanged("Default");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public partial class Function : System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string descriptionField;
        
        private List<Argument> argumentsField;
        
        private string expressionField;
        
        /// <summary>
        /// Function class constructor
        /// </summary>
        public Function() {
            this.argumentsField = new List<Argument>();
        }
        
        public string Name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                if ((this.descriptionField != null)) {
                    if ((descriptionField.Equals(value) != true)) {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Argument", IsNullable=false)]
        public List<Argument> Arguments {
            get {
                return this.argumentsField;
            }
            set {
                if ((this.argumentsField != null)) {
                    if ((argumentsField.Equals(value) != true)) {
                        this.argumentsField = value;
                        this.OnPropertyChanged("Arguments");
                    }
                }
                else {
                    this.argumentsField = value;
                    this.OnPropertyChanged("Arguments");
                }
            }
        }
        
        public string Expression {
            get {
                return this.expressionField;
            }
            set {
                if ((this.expressionField != null)) {
                    if ((expressionField.Equals(value) != true)) {
                        this.expressionField = value;
                        this.OnPropertyChanged("Expression");
                    }
                }
                else {
                    this.expressionField = value;
                    this.OnPropertyChanged("Expression");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>
    /// Class for table data persistence and operations
    /// </summary>
    public partial class Table : System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private Row rowHeaderField;
        
        private List<Row> rowsField;
        
        /// <summary>
        /// Table class constructor
        /// </summary>
        public Table() {
            this.rowsField = new List<Row>();
            this.rowHeaderField = new Row();
        }
        
        public string Name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        public Row RowHeader {
            get {
                return this.rowHeaderField;
            }
            set {
                if ((this.rowHeaderField != null)) {
                    if ((rowHeaderField.Equals(value) != true)) {
                        this.rowHeaderField = value;
                        this.OnPropertyChanged("RowHeader");
                    }
                }
                else {
                    this.rowHeaderField = value;
                    this.OnPropertyChanged("RowHeader");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public List<Row> Rows {
            get {
                return this.rowsField;
            }
            set {
                if ((this.rowsField != null)) {
                    if ((rowsField.Equals(value) != true)) {
                        this.rowsField = value;
                        this.OnPropertyChanged("Rows");
                    }
                }
                else {
                    this.rowsField = value;
                    this.OnPropertyChanged("Rows");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>
    /// The container for an equation project, encapsulates all the equations and variables
    /// </summary>
    public partial class EquationProject : System.ComponentModel.INotifyPropertyChanged {
        
        private string titleField;
        
        private SolverSettings settingsField;
        
        private AuditInfo auditField;
        
        private List<Variable> variablesField;
        
        private List<Equation> equationsField;
        
        private List<Function> functionsField;
        
        private List<Table> tablesField;
        
        /// <summary>
        /// EquationProject class constructor
        /// </summary>
        public EquationProject() {
            this.tablesField = new List<Table>();
            this.functionsField = new List<Function>();
            this.equationsField = new List<Equation>();
            this.variablesField = new List<Variable>();
            this.auditField = new AuditInfo();
            this.settingsField = new SolverSettings();
        }
        
        public string Title {
            get {
                return this.titleField;
            }
            set {
                if ((this.titleField != null)) {
                    if ((titleField.Equals(value) != true)) {
                        this.titleField = value;
                        this.OnPropertyChanged("Title");
                    }
                }
                else {
                    this.titleField = value;
                    this.OnPropertyChanged("Title");
                }
            }
        }
        
        public SolverSettings Settings {
            get {
                return this.settingsField;
            }
            set {
                if ((this.settingsField != null)) {
                    if ((settingsField.Equals(value) != true)) {
                        this.settingsField = value;
                        this.OnPropertyChanged("Settings");
                    }
                }
                else {
                    this.settingsField = value;
                    this.OnPropertyChanged("Settings");
                }
            }
        }
        
        public AuditInfo Audit {
            get {
                return this.auditField;
            }
            set {
                if ((this.auditField != null)) {
                    if ((auditField.Equals(value) != true)) {
                        this.auditField = value;
                        this.OnPropertyChanged("Audit");
                    }
                }
                else {
                    this.auditField = value;
                    this.OnPropertyChanged("Audit");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Variable", IsNullable=false)]
        public List<Variable> Variables {
            get {
                return this.variablesField;
            }
            set {
                if ((this.variablesField != null)) {
                    if ((variablesField.Equals(value) != true)) {
                        this.variablesField = value;
                        this.OnPropertyChanged("Variables");
                    }
                }
                else {
                    this.variablesField = value;
                    this.OnPropertyChanged("Variables");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Equation", IsNullable=false)]
        public List<Equation> Equations {
            get {
                return this.equationsField;
            }
            set {
                if ((this.equationsField != null)) {
                    if ((equationsField.Equals(value) != true)) {
                        this.equationsField = value;
                        this.OnPropertyChanged("Equations");
                    }
                }
                else {
                    this.equationsField = value;
                    this.OnPropertyChanged("Equations");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Function", IsNullable=false)]
        public List<Function> Functions {
            get {
                return this.functionsField;
            }
            set {
                if ((this.functionsField != null)) {
                    if ((functionsField.Equals(value) != true)) {
                        this.functionsField = value;
                        this.OnPropertyChanged("Functions");
                    }
                }
                else {
                    this.functionsField = value;
                    this.OnPropertyChanged("Functions");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Table", IsNullable=false)]
        public List<Table> Tables {
            get {
                return this.tablesField;
            }
            set {
                if ((this.tablesField != null)) {
                    if ((tablesField.Equals(value) != true)) {
                        this.tablesField = value;
                        this.OnPropertyChanged("Tables");
                    }
                }
                else {
                    this.tablesField = value;
                    this.OnPropertyChanged("Tables");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public enum VariableTypes {
        
        /// <remarks/>
        NONE,
        
        /// <remarks/>
        TEXT,
        
        /// <remarks/>
        BOOL,
        
        /// <remarks/>
        NUMBER,
        
        /// <remarks/>
        DATE,
    }
}
