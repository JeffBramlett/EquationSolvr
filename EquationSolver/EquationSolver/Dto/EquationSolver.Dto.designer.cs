// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.19279 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>EquationSolver.Dto</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace EquationSolver.Dto {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// The container for an equation project, encapsulates all the equations and variables
    /// </summary>
    public partial class EquationProject : System.ComponentModel.INotifyPropertyChanged {
        
        private string titleField;
        
        private SolverSettings settingsField;
        
        private AuditInfo auditField;
        
        private List<Variable> variablesField;
        
        private List<Equation> equationsField;
        
        /// <summary>
        /// EquationProject class constructor
        /// </summary>
        public EquationProject() {
            this.equationsField = new List<Equation>();
            this.variablesField = new List<Variable>();
            this.auditField = new AuditInfo();
            this.settingsField = new SolverSettings();
        }
        
        public string Title {
            get {
                return this.titleField;
            }
            set {
                if ((this.titleField != null)) {
                    if ((titleField.Equals(value) != true)) {
                        this.titleField = value;
                        this.OnPropertyChanged("Title");
                    }
                }
                else {
                    this.titleField = value;
                    this.OnPropertyChanged("Title");
                }
            }
        }
        
        public SolverSettings Settings {
            get {
                return this.settingsField;
            }
            set {
                if ((this.settingsField != null)) {
                    if ((settingsField.Equals(value) != true)) {
                        this.settingsField = value;
                        this.OnPropertyChanged("Settings");
                    }
                }
                else {
                    this.settingsField = value;
                    this.OnPropertyChanged("Settings");
                }
            }
        }
        
        public AuditInfo Audit {
            get {
                return this.auditField;
            }
            set {
                if ((this.auditField != null)) {
                    if ((auditField.Equals(value) != true)) {
                        this.auditField = value;
                        this.OnPropertyChanged("Audit");
                    }
                }
                else {
                    this.auditField = value;
                    this.OnPropertyChanged("Audit");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public List<Variable> Variables {
            get {
                return this.variablesField;
            }
            set {
                if ((this.variablesField != null)) {
                    if ((variablesField.Equals(value) != true)) {
                        this.variablesField = value;
                        this.OnPropertyChanged("Variables");
                    }
                }
                else {
                    this.variablesField = value;
                    this.OnPropertyChanged("Variables");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public List<Equation> Equations {
            get {
                return this.equationsField;
            }
            set {
                if ((this.equationsField != null)) {
                    if ((equationsField.Equals(value) != true)) {
                        this.equationsField = value;
                        this.OnPropertyChanged("Equations");
                    }
                }
                else {
                    this.equationsField = value;
                    this.OnPropertyChanged("Equations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public partial class SolverSettings : System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public partial class Equation : System.ComponentModel.INotifyPropertyChanged {
        
        private string useExpressionField;
        
        private string expressionField;
        
        private string targetField;
        
        private List<Equation> moreEquationsField;
        
        /// <summary>
        /// Equation class constructor
        /// </summary>
        public Equation() {
            this.moreEquationsField = new List<Equation>();
        }
        
        public string UseExpression {
            get {
                return this.useExpressionField;
            }
            set {
                if ((this.useExpressionField != null)) {
                    if ((useExpressionField.Equals(value) != true)) {
                        this.useExpressionField = value;
                        this.OnPropertyChanged("UseExpression");
                    }
                }
                else {
                    this.useExpressionField = value;
                    this.OnPropertyChanged("UseExpression");
                }
            }
        }
        
        public string Expression {
            get {
                return this.expressionField;
            }
            set {
                if ((this.expressionField != null)) {
                    if ((expressionField.Equals(value) != true)) {
                        this.expressionField = value;
                        this.OnPropertyChanged("Expression");
                    }
                }
                else {
                    this.expressionField = value;
                    this.OnPropertyChanged("Expression");
                }
            }
        }
        
        public string Target {
            get {
                return this.targetField;
            }
            set {
                if ((this.targetField != null)) {
                    if ((targetField.Equals(value) != true)) {
                        this.targetField = value;
                        this.OnPropertyChanged("Target");
                    }
                }
                else {
                    this.targetField = value;
                    this.OnPropertyChanged("Target");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public List<Equation> MoreEquations {
            get {
                return this.moreEquationsField;
            }
            set {
                if ((this.moreEquationsField != null)) {
                    if ((moreEquationsField.Equals(value) != true)) {
                        this.moreEquationsField = value;
                        this.OnPropertyChanged("MoreEquations");
                    }
                }
                else {
                    this.moreEquationsField = value;
                    this.OnPropertyChanged("MoreEquations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public partial class Variable : System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string stringValueField;
        
        public string Name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        public string StringValue {
            get {
                return this.stringValueField;
            }
            set {
                if ((this.stringValueField != null)) {
                    if ((stringValueField.Equals(value) != true)) {
                        this.stringValueField = value;
                        this.OnPropertyChanged("StringValue");
                    }
                }
                else {
                    this.stringValueField = value;
                    this.OnPropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public partial class AuditInfo : System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime createdOnField;
        
        private string createdByField;
        
        private System.DateTime modifiedOnField;
        
        private string modifiedByField;
        
        public System.DateTime CreatedOn {
            get {
                return this.createdOnField;
            }
            set {
                if ((createdOnField.Equals(value) != true)) {
                    this.createdOnField = value;
                    this.OnPropertyChanged("CreatedOn");
                }
            }
        }
        
        public string CreatedBy {
            get {
                return this.createdByField;
            }
            set {
                if ((this.createdByField != null)) {
                    if ((createdByField.Equals(value) != true)) {
                        this.createdByField = value;
                        this.OnPropertyChanged("CreatedBy");
                    }
                }
                else {
                    this.createdByField = value;
                    this.OnPropertyChanged("CreatedBy");
                }
            }
        }
        
        public System.DateTime ModifiedOn {
            get {
                return this.modifiedOnField;
            }
            set {
                if ((modifiedOnField.Equals(value) != true)) {
                    this.modifiedOnField = value;
                    this.OnPropertyChanged("ModifiedOn");
                }
            }
        }
        
        public string ModifiedBy {
            get {
                return this.modifiedByField;
            }
            set {
                if ((this.modifiedByField != null)) {
                    if ((modifiedByField.Equals(value) != true)) {
                        this.modifiedByField = value;
                        this.OnPropertyChanged("ModifiedBy");
                    }
                }
                else {
                    this.modifiedByField = value;
                    this.OnPropertyChanged("ModifiedBy");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public enum VariableTypes {
        
        /// <remarks/>
        NONE,
        
        /// <remarks/>
        TEXT,
        
        /// <remarks/>
        BOOL,
        
        /// <remarks/>
        NUMBER,
        
        /// <remarks/>
        DATE,
    }
}
